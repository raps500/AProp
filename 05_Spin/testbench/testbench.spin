'**********************************************
'* Spin code generated by cspin version 0.68 *
'**********************************************

CON
  _clkmode = xtal1 + pll16x
  _xinfreq = 5_000_000

OBJ
  c : "clib"

PUB start
  c.start
  main

{
 * Testbench for the alu
 * (c) Pacito.Sys
 }

CON
  NUM_VALUES = 8
  MAX_POS = $7fffffff
  MAX_NEG = $80000000
  MAX_NEG1 = $80000001

DAT
  datstr byte "RDBYTE", 0, "RDWORD", 0, "RDLONG", 0
  byte "HUBOP", 0, "UNDEF0", 0, "UNDEF1", 0, "UNDEF2", 0
  byte "UNDEF3", 0, "ROR", 0, "ROL", 0, "SHR", 0, "SHL", 0
  byte "RCR", 0, "RCL", 0, "SAR", 0, "REV", 0, "MINS", 0
  byte "MAXS", 0, "MIN", 0, "MAX", 0, "MOVS", 0, "MOVD", 0
  byte "MOVI", 0, "JMPRET", 0, "AND", 0, "ANDN", 0, "OR", 0
  byte "XOR", 0, "MUXC", 0, "MUXNC", 0, "MUXNZ", 0, "MUXZ", 0
  byte "ADD", 0, "SUB", 0, "ADDABS", 0, "SUBABS", 0, "SUMC", 0
  byte "SUMNC", 0, "SUMZ", 0, "SUMNZ", 0, "MOV", 0, "NEG", 0
  byte "ABS", 0, "ABSNEG", 0, "NEGC", 0, "NEGZ", 0, "NEGNC", 0
  byte "NEGNZ", 0, "CMPS", 0, "CMPSX", 0, "ADDX", 0, "SUBX", 0
  byte "ADDS", 0, "SUBS", 0, "ADDSX", 0, "SUBSX", 0, "CMPSUB", 0
  byte "DJNZ", 0, "TJNZ", 0, "TJZ", 0, "WAITPEQ", 0, "WAITPNE", 0
  byte "WAITCNT", 0, "WAITVID", 0
  opcodeName long @datstr + 16, @datstr + 23, @datstr + 30
  long @datstr + 37, @datstr + 43, @datstr + 50, @datstr + 57
  long @datstr + 64, @datstr + 71, @datstr + 75, @datstr + 79
  long @datstr + 83, @datstr + 87, @datstr + 91, @datstr + 95
  long @datstr + 99, @datstr + 103, @datstr + 108, @datstr + 113
  long @datstr + 117, @datstr + 121, @datstr + 126, @datstr + 131
  long @datstr + 136, @datstr + 143, @datstr + 147, @datstr + 152
  long @datstr + 155, @datstr + 159, @datstr + 164, @datstr + 170
  long @datstr + 176, @datstr + 181, @datstr + 185, @datstr + 189
  long @datstr + 196, @datstr + 203, @datstr + 208, @datstr + 214
  long @datstr + 219, @datstr + 225, @datstr + 229, @datstr + 233
  long @datstr + 237, @datstr + 244, @datstr + 249, @datstr + 254
  long @datstr + 260, @datstr + 266, @datstr + 271, @datstr + 277
  long @datstr + 282, @datstr + 287, @datstr + 292, @datstr + 297
  long @datstr + 303, @datstr + 309, @datstr + 316, @datstr + 321
  long @datstr + 326, @datstr + 330, @datstr + 338, @datstr + 346
  long @datstr + 354
  test_values long 0, 1, 2, MAX_POS, MAX_NEG, MAX_NEG1, - 2, - 1

VAR
  long mailbox[4]

PUB alu(opcode, S, D, C_0, Z, alu_q, alu_c, alu_z)
  mailbox[1] := D
  mailbox[2] := S
  mailbox[3] :=(Z << 1) | C_0
  mailbox[0] := opcode
  repeat while (mailbox[0])
  long[alu_q] := mailbox[1]
  long[alu_c] := mailbox[3] & 1
  long[alu_z] :=(mailbox[3] >> 1) & 1

PUB writeTest(opcode) | testnum, s_0, d_0, S, D, C_0, Z, alu_q, alu_c, alu_z, name[3]
  testnum := 0
  c.strcpy(@name, string("        "))
  c.memcpy(@name, opcodeName[opcode], strsize(opcodeName[opcode]))
  c.printf1(string("%s"), @name)
  c.printf0(string("---D---- ---S---- ZC = ---Q---- ZC\n"))
  s_0 := 0
  repeat while (s_0 < NUM_VALUES)
    S := test_values[s_0]
    d_0 := 0
    repeat while (d_0 < NUM_VALUES)
      D := test_values[d_0]
      C_0 := 0
      repeat while (C_0 =< 1)
        Z := 0
        repeat while (Z =< 1)
          alu(opcode, S, D, C_0, Z, @alu_q, @alu_c, @alu_z)
          { c.printf2(string("%02x %02x"), testnum++, opcode) }
          c.printf4(string("        %08x %08x %1x%1x ="), D, S, Z, C_0)
          c.printf3(string(" %08x %1x%1x\n"), alu_q, alu_z, alu_c)
          Z++
        C_0++                           
      d_0++
    s_0++

PUB main | j
  start_alu
  waitcnt(CNT + 400_000_000)
  c.printf0(string("Testbench for P8AX32  \n"))
  
  j := 40
  repeat while (j < 42)
    if (j == 23)
      j++
      next
    writeTest(j)
    j++
  stop_alu
  return 0
' INLINE SPIN
PUB start_alu
  mailbox[0] := 0
  cognew(@cmdloop, @mailbox)
PUB stop_alu
  cogstop(1)
  cogstop(2)
DAT
                        org     0
cmdloop                 rdlong  op, par             wz
        if_z            jmp     #cmdloop
                        shl     op, #3
                        or      op, #7
                        movi    instruct, op
                        mov     addr, par
                        add     addr, #4
                        rdlong  dst, addr
                        add     addr, #4
                        rdlong  src, addr
                        add     addr, #4
                        rdlong  flags, addr
                        shr     flags, #1           wc
                        and     flags, #1
                        xor     flags, #1           wz
instruct                mov     dst, src            wz, wc
        if_nz_and_nc    mov     flags, #0
        if_nz_and_c     mov     flags, #1
        if_z_and_nc     mov     flags, #2
        if_z_and_c      mov     flags, #3
                        wrlong  flags, addr
                        sub     addr, #8
                        wrlong  dst, addr
                        wrlong  zero, par
                        jmp     #cmdloop      
op                      long    0
dst                     long    0
src                     long    0
flags                   long    0
addr                    long    0
zero                    long    0