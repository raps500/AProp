; pacito LMM Assembler (c) 2007-2008 Pacito.Sys

; input file : /home/ale/prg/projects/pbcd/pbcdmath12.pasm, output file : /home/ale/prg/projects/pbcd/pbcdmath12.pasm.bin
; this file : /home/ale/prg/projects/pbcd/pbcdmath12.pasm.lst

Line 708: End of file reached
                    .section COG cog0
                    '
                    ' BCD floating point library for the Parallax Propeller
                    ' (c) 2008 Pacito.Sys
                    '
                    ' Distributed under the terms of the GPL v2
                    '
                    ' Format (HUB memory)
                    '
                    '   7                           0
                    ' +---+---+---+---+---+---+---+---+ 
                    ' | S |MSD  A   9   8   7   6   5 |  8 nibbles, 1 long
                    ' +---+---+---+---+---+---+---+---+
                    '   7                           0
                    ' +---+---+---+---+---+---+---+---+
                    ' | 4 | 3 | 2 | 1 |LSD| E2| E1| E0|  8 nibbles 1 long
                    ' +---+---+---+---+---+---+---+---+
                    '
                    ' S : sign nibble
                    '
                    ' MSD-LSD : 12 digit Significand
                    ' 
                    ' E2..E0  : Exponent two's complement
                    '
                    '      sign exponent
                    ' 4 : 8 digit significand (upper)
                    ' 8 : 8 digit significand (lower)
00000000  5927ff5c  		call	#BCDSQR15
00000004  35a9fe5c  		call	#TOASCIIQDR
00000008  103ffe5c  		call	#RTOINT
0000000c  cb73bf6c  BCDSUB15		xor	rBSgn,cnt_SMASK	' I love long routines ;-)
00000010  b57dbfa0  BCDADD15		mov	rt1,rASgn
00000014  b97dbf6c  		xor	rt1,rBSgn
00000018  cb7d3f62  		test	rt1,cnt_SMASK wz
0000001c  2100545c  	if_nz	jmp	#SUB15
                    ' falls to ADD15
                    ' ******************************************
                    ' ***
                    ' *** addition of two bcd unpacked numbers rR = rA + rB
00000020  b47dbfa0  ADD15		mov	rt1,rAExp
00000024  b87dbfd6  		subs	rt1,rBExp wz
00000028  be7fbfa8  		abs	rt2,rt1
0000002c  1900685c  	if_z	jmp	#ADD15_20		' adds, no shift
00000030  107c7f85  		cmp	rt1,#16 wc
00000034  1400705c  	if_c	jmp	#ADD15_5		' shifts B
00000038  107e7f85  		cmp	rt2,#16 wc
0000003c  1700705c  	if_c	jmp	#ADD15_10
00000040  107c7f85  		cmp	rt1,#16 wc
00000044  e0c8f15c  	if_c	call	#LOADBTOR
00000048  dbbecd5c  	if_nc	call	#LOADATOR
0000004c  3e007c5c  		jmp	#ADD15_ret
00000050  b16cfd5c  ADD15_5		call	#mSHRB15
00000054  147effe4  		djnz	rt2,#ADD15_5
00000058  19007c5c  		jmp	#ADD15_20
0000005c  a756fd5c  ADD15_10		call	#mSHRA15
00000060  177effe4  		djnz	rt2,#ADD15_10
00000064  68e0fc5c  ADD15_20		call	#mADD15
00000068  ba7dbfa0  		mov	rt1,rR
0000006c  cc7dbf62  		and	rt1,cnt_MSD wz
00000070  bc82d55c  	if_nz	call	#mSHRR15
00000074  b479bfa0  		mov	rRExp,rAExp
00000078  0178d780  	if_nz	add	rRExp,#1
0000007c  b57bbfa0  		mov	rRSgn,rASgn	' sets sign from A
00000080  3e007c5c  		jmp	#ADD15_ret
                    ' ********************************************
                    ' ***
                    ' *** Substraction
                    ' ***
00000084  b47dbfa0  SUB15		mov	rt1,rAExp
00000088  b87dbfd6  		subs	rt1,rBExp wz
0000008c  be7fbfa8  		abs	rt2,rt1
00000090  3100685c  	if_z	jmp	#SUB15_15	' adds, no shift
00000094  107c7f85  		cmp	rt1,#16 wc
00000098  2e00705c  	if_c	jmp	#SUB15_10	' shifts B
0000009c  107e7f85  		cmp	rt2,#16 wc
000000a0  2d00705c  	if_c	jmp	#SUB15_5
000000a4  107c7f85  		cmp	rt1,#16 wc
000000a8  e0c8f15c  	if_c	call	#LOADBTOR
000000ac  dbbecd5c  	if_nc	call	#LOADATOR
000000b0  3e007c5c  		jmp	#SUB15_ret
                    ' B is bigger than A
000000b4  ceb4fd5c  SUB15_5		call	#XCHGAB
                    ' A is bigger than B
000000b8  b16cfd5c  SUB15_10		call	#mSHRB15
000000bc  2e7effe4  		djnz	rt2,#SUB15_10
                    '		mov	rRSgn,rASgn	' transfers sign
                    '		mov	rRExp,rAExp		
000000c0  33007c5c  		jmp	#SUB15_20
                    ' exponents are equal, so check significand 
000000c4  c894fd5c  SUB15_15		call	#mCMP15
000000c8  ceb4f15c  	if_c	call	#XCHGAB		' sig(A)<sig(B)
                    '	if_c	mov	rRSgn,rBSgn	' sign of B
                    '		mov	rRExp,rAExp
                    SUB15_20
000000cc  b57bbfa0  		mov	rRSgn,rASgn	' transfers sign
000000d0  b479bfa0  		mov	rRExp,rAExp		
000000d4  71f2fc5c  		call	#mSUB15
000000d8  ba7dbfa0  SUB15_25		mov	rt1,rR
000000dc  cd7dbf62  		and	rt1,cnt_D12 wz
000000e0  3e00545c  	if_nz	jmp	#SUB15_ret
000000e4  0178ff84  	  	sub	rRExp,#1
000000e8  b776fd5c    		call	#mSHLR15
000000ec  cb9afd5c  		call	#mCMPRZ	' tests for zero
000000f0  3600545c  	if_nz	jmp	#SUB15_25
000000f4  e5d2fd5c  		call	#LOADZTOR
                    ''		jmp	#SUB15_ret
                    SUB15_30
                    ADD15_ret
                    BCDSUB15_ret
                    BCDADD15_ret		
000000f8  00007c5c  SUB15_ret	ret
                    ' ********************************************************
                    ' ****
                    ' **** Multiplication R=A*B
000000fc  b479bfa0  BCDMUL15		mov	rRExp,rAExp
00000100  b879bfd0  		adds	rRExp,rBExp
                    ' ** do not forget check for overflow ;-)
00000104  0074ffa0  		mov	rR,#0		' result significand
00000108  0076ffa0  		mov	rR1,#0
0000010c  b76f3f62  		test	rB1,rB1 wz
00000110  4600685c  	if_z	jmp	#MUL15_5 	' avoids 8 zeroes
00000114  50cefc5c  		call	#mMUL8
00000118  b66fbfa0  MUL15_5		mov	rB1,rB
0000011c  50cefc5c  		call	#mMUL8
00000120  b776fd5c  		call	#mSHLR15
00000124  ba7dbfa0  		mov	rt1,rR
00000128  cd7dbf62  		and	rt1,cnt_D12 wz
0000012c  0178d780  	if_nz	add	rRExp,#1		' increments exponent
00000130  b776e95c  	if_z	call	#mSHLR15		' normalizes significand
00000134  b57bbfa0  		mov	rRSgn,rASgn
00000138  b97bbf6c  		xor	rRSgn,rBSgn
0000013c  00007c5c  BCDMUL15_ret	ret
                    '
                    ' multiplies A*rB1
                    '
                    ' uses rt1, rt2, rt5, rt6, rcnt1, rp, rB1, rR, rR1
                    ' 
                    ' clogged by mADD8 rt3, rt4, rt5, rcarry, rmsk1, rsh1
                    ' clogged by mSHRR15 rt5, rR, rR1
00000140  0888ffa0  mMUL8		mov	rt7,#8
                    		
00000144  b78fbfa0  mMUL8_5		mov	rcnt1,rB1
00000148  0f8eff62  		and	rcnt1,#$f wz
0000014c  0086ffa0  		mov	rt6,#0
00000150  5f00685c  	if_z	jmp	#mMUL8_15
00000154  b37dbfa0  mMUL8_10		mov	rt1,rA1
00000158  bb7fbfa0  		mov	rt2,rR1
0000015c  7a1efd5c  		call	#mADD8
00000160  c277bfa0  		mov	rR1,rt5
00000164  b27dbfa0  		mov	rt1,rA
00000168  ba7fbfa0  		mov	rt2,rR
0000016c  7c1efd5c  		call	#mADD8C
00000170  c275bfa0  		mov	rR,rt5
00000174  0186cf80  	if_nc	add	rt6,#1		' carry counter
00000178  558effe4  		djnz	rcnt1,#mMUL8_10
0000017c  0484ffa0  mMUL8_15		mov	rt5,#4 	
00000180  0174ff29  mMUL8_20		shr	rR,#1 wc
00000184  0176ff30  		rcr	rR1,#1
00000188  6084ffe4  		djnz	rt5,#mMUL8_20
0000018c  0486ff20  		ror	rt6,#4		' convert to MSD
00000190  c375bf68  		or	rR,rt6		' sets new carry digit
00000194  046eff28  		shr	rB1,#4
00000198  5188ffe4  		djnz	rt7,#mMUL8_5
0000019c  00007c5c  mMUL8_ret	ret
                    ' ********************************************************
                    ' ********************************************************
                    ' ****
                    ' ****
                    ' ****  Significand functions
                    ' significad addition/substraction
000001a0  b37dbfa0  mADD15		mov	rt1,rA1
000001a4  b77fbfa0  		mov	rt2,rB1
000001a8  7a1efd5c  		call	#mADD8
000001ac  c277bfa0  		mov	rR1,rt5
000001b0  b27dbfa0  		mov	rt1,rA
000001b4  b67fbfa0  		mov	rt2,rB
000001b8  7c1efd5c  		call	#mADD8C
000001bc  c275bfa0  		mov	rR,rt5
000001c0  00007c5c  mADD15_ret	ret
000001c4  b37dbfa0  mSUB15		mov	rt1,rA1
000001c8  b77fbfa0  		mov	rt2,rB1
000001cc  9040fd5c  		call	#mSUB8
000001d0  c277bfa0  		mov	rR1,rt5
000001d4  b27dbfa0  		mov	rt1,rA
000001d8  b67fbfa0  		mov	rt2,rB
000001dc  9140fd5c  		call	#mSUB8C
000001e0  c275bfa0  		mov	rR,rt5
000001e4  00007c5c  mSUB15_ret	ret	
                    ' Adds two 8 digit longs
                    ' carry is used in negative logic !
000001e8  038cffa0  mADD8		mov	rcarry,#3
000001ec  018cff29  		shr	rcarry,#1 wc ' sets carry flag
000001f0  0f90ffa0  mADD8C		mov	rmsk1,#$f
000001f4  0084ffa0  		mov	rt5,#0
000001f8  0a92ffa0  		mov	rsh1,#10
000001fc  be81bfa0  mADD8_1		mov	rt3,rt1
00000200  c881bf60  		and	rt3,rmsk1
                    	
00000204  bf83bfa0  		mov	rt4,rt2
00000208  c883bf60  		and	rt4,rmsk1
                    	
0000020c  c6838f80  	if_nc	add	rt4,rcarry
00000210  c181bf81  		add	rt3,rt4 wc
00000214  88004c5c  	if_nc	jmp	#mADD8_5
00000218  018cffa1  		mov	rcarry,#1 wc ' clears carry flag for next round
0000021c  8f007c5c  		jmp	#mADD8_ret
00000220  c9813f85  mADD8_5		cmp	rt3,rsh1 wc
00000224  c9818f84  	if_nc	sub	rt3,rsh1
00000228  c085bf68  	  	or	rt5,rt3
0000022c  048cff24  		rol	rcarry,#4 ' magic
00000230  0492ff2c  		shl	rsh1,#4
00000234  0490ff2e  		shl	rmsk1,#4 wz
00000238  7f00545c  	if_nz	jmp	#mADD8_1
                    mADD8C_ret
0000023c  00007c5c  mADD8_ret	ret
                    ' Subs two 8 digit longs
00000240  018cffa1  mSUB8		mov	rcarry,#1 wc ' clrs carry flag
00000244  0f90ffa0  mSUB8C		mov	rmsk1,#$f
00000248  0084ffa0  		mov	rt5,#0
0000024c  0a92ffa0  		mov	rsh1,#10
00000250  be81bfa0  mSUB8_1		mov	rt3,rt1
00000254  c881bf60  		and	rt3,rmsk1
00000258  bf83bfa0  		mov	rt4,rt2
0000025c  c883bf60  		and	rt4,rmsk1		
00000260  c683b380  	if_c	add	rt4,rcarry
00000264  c181bf85  		sub	rt3,rt4 wc
00000268  c981b380  	if_c	add	rt3,rsh1
0000026c  c085bf68    		or	rt5,rt3
00000270  048cff24  		rol	rcarry,#4 ' magic
00000274  0492ff2c  		shl	rsh1,#4
00000278  0490ff2e  		shl	rmsk1,#4 wz
0000027c  9400545c  	if_nz	jmp	#mSUB8_1
                    mSUB8C_ret
00000280  00007c5c  mSUB8_ret	ret
                    ' shifts A left one digit
00000284  b385bfa0  mSHLA15         mov     rt5,rA1
00000288  0466ff2c                  shl     rA1,#4
0000028c  0464ff2c                  shl     rA,#4
00000290  1c84ff28                  shr     rt5,#28
00000294  c265bf68                  or      rA,rt5
00000298  00007c5c  mSHLA15_ret     ret
                    ' shifts A right one digit
0000029c  0484ffa0  mSHRA15		mov	rt5,#4
000002a0  0164ff29  mSHRA15_1	shr	rA,#1 wc
000002a4  0166ff30  		rcr	rA1,#1
000002a8  a884ffe4  		djnz	rt5,#mSHRA15_1
000002ac  00007c5c  mSHRA15_ret	ret
                    ' shifts B left one digit
000002b0  0484ffa0  mSHLB15		mov	rt5,#4
000002b4  016eff2d  mSHLB15_1	shl      rB1,#1 wc
000002b8  016cff34  		rcl	rB,#1
000002bc  ad84ffe4  		djnz	rt5,#mSHLB15_1
000002c0  00007c5c  mSHLB15_ret	ret
                    ' shifts B right one digit
000002c4  b685bfa0  mSHRB15		mov	rt5,rB
000002c8  046cff28  		shr	rB,#4
000002cc  1c84ff2c  		shl	rt5,#28
000002d0  046eff28  		shr	rB1,#4
000002d4  c26fbf68  		or	rB1,rt5
000002d8  00007c5c  mSHRB15_ret	ret
                    ' shifts B left one digit
000002dc  0484ffa0  mSHLR15		mov	rt5,#4
000002e0  0176ff2d  mSHLR15_1	shl      rR1,#1 wc
000002e4  0174ff34  		rcl	rR,#1
000002e8  b884ffe4  		djnz	rt5,#mSHLR15_1
                    	
000002ec  00007c5c  mSHLR15_ret	ret
                    ' shifts R right one digit
000002f0  ba85bfa0  mSHRR15		mov	rt5,rR
000002f4  0474ff28  		shr	rR,#4
000002f8  1c84ff2c  		shl	rt5,#28
000002fc  0476ff28  		shr	rR1,#4
00000300  c277bf68  		or	rR1,rt5
00000304  00007c5c  mSHRR15_ret	ret
                    ' shifts rt6:rt7 right one digit
00000308  c385bfa0  mSHR6715        mov    rt5,rt6
0000030c  0486ff28                  shr    rt6,#4
00000310  1c84ff2c                  shl    rt5,#28
00000314  0488ff28                  shr    rt7,#4
00000318  c289bf68                  or     rt7,rt5
0000031c  00007c5c  mSHR6715_ret    ret
00000320  b6653f87  mCMP15		cmp	rA,rB wc wz
00000324  b7672b87  	if_z	cmp	rA1,rB1 wc wz
00000328  00007c5c  mCMP15_ret	ret
0000032c  ba753f62  mCMPRZ		test	rR,rR wz
00000330  bb772b62  	if_z	test	rR1,rR1 wz
00000334  00007c5c  mCMPRZ_ret	ret
                    ' ********************************************************
                    ' ********************************************************
                    ' ****
                    ' **** Whole number functions
                    ' exchanges A with B
00000338  b665bf6c  XCHGAB		xor	rA,rB
0000033c  b26dbf6c  		xor	rB,rA
00000340  b665bf6c  		xor	rA,rB
00000344  b767bf6c  		xor	rA1,rB1
00000348  b36fbf6c  		xor	rB1,rA1
0000034c  b767bf6c  		xor	rA1,rB1
00000350  b869bf6c  		xor	rAExp,rBExp
00000354  b471bf6c  		xor	rBExp,rAExp
00000358  b869bf6c  		xor	rAExp,rBExp
0000035c  b96bbf6c  		xor	rASgn,rBSgn
00000360  b573bf6c  		xor	rBSgn,rASgn
00000364  b96bbf6c  		xor	rASgn,rBSgn
00000368  00007c5c  XCHGAB_ret	ret
                    ' loads A to R
0000036c  b275bfa0  LOADATOR		mov	rR,rA
00000370  b377bfa0  		mov	rR1,rA1
00000374  b479bfa0  		mov	rRExp,rAExp
00000378  b97bbfa0  		mov	rRSgn,rBSgn
0000037c  00007c5c  LOADATOR_ret	ret
                    ' loads B to R
00000380  b675bfa0  LOADBTOR		mov	rR,rB
00000384  b777bfa0  		mov	rR1,rB1
00000388  b879bfa0  		mov	rRExp,rBExp
0000038c  b97bbfa0  		mov	rRSgn,rBSgn
00000390  00007c5c  LOADBTOR_ret	ret
                    ' loads zero to R
00000394  0074ffa0  LOADZTOR		mov	rR,#0
00000398  0076ffa0  		mov	rR1,#0
0000039c  0078ffa0  		mov	rRExp,#0
000003a0  007affa0  		mov	rRSgn,#0
000003a4  00007c5c  LOADZTOR_ret	ret
                    ' Loads A as BCD12
000003a8  b165bf08  LOADA		rdlong	rA,ptr1		' reads first long
000003ac  0462ff80  		add	ptr1,#4
000003b0  b26bbfa0  		mov	rASgn,rA
000003b4  b167bf08  		rdlong	rA1,ptr1		' reads 2nd long
000003b8  cb6bbf60  		and	rASgn,cnt_SMASK
000003bc  cb65bf64  		andn	rA,cnt_SMASK
000003c0  b369bfa0  		mov	rAExp,rA1
000003c4  1468ff2c  		shl	rAExp,#20	' exponent is signed
000003c8  1468ff38  		sar	rAExp,#20
000003cc  cf67bf60  		and	rA1,cnt_2LMASK
000003d0  00007c5c  LOADA_ret	ret
                    ' Loads B as BCD12
000003d4  b16dbf08  LOADB		rdlong	rB,ptr1		' reads first long
000003d8  0462ff80  		add	ptr1,#4
000003dc  b673bfa0  		mov	rBSgn,rB
000003e0  b16fbf08  		rdlong	rB1,ptr1		' reads 2nd long
000003e4  cb73bf60  		and	rBSgn,cnt_SMASK
000003e8  cb6dbf64  		andn	rB,cnt_SMASK
000003ec  b771bfa0  		mov	rBExp,rB1
000003f0  1470ff2c  		shl	rBExp,#20	' exponent is signed
000003f4  1470ff38  		sar	rBExp,#20
000003f8  cf6fbf60  		and	rB1,cnt_2LMASK
000003fc  00007c5c  LOADB_ret	ret
                    ' saves R as a BCD12
00000400  ba7dbfa0  SAVER		mov	rt1,rR
00000404  bd7dbf68  		or	rt1,rRSgn
00000408  bc7fbfa0  		mov	rt2,rRExp
0000040c  cf7fbf64  		andn	rt2,cnt_2LMASK
00000410  bb81bfa0  		mov	rt3,rR1
00000414  cf81bf60  		and	rt3,cnt_2LMASK
00000418  b17d3f08  		wrlong	rt1,ptr1
0000041c  c07fbf68  		or	rt2,rt3
00000420  0462ff80  		add	ptr1,#4
00000424  b17f3f08  		wrlong	rt2,ptr1
00000428  00007c5c  SAVER_ret	ret
                    ' multiplies rt1*10, uses rt2
0000042c  be7fbfa0  MUL10		mov	rt2,rt1
00000430  037eff2c  		shl	rt2,#3
00000434  be7fbf80  		add	rt2,rt1
00000438  bf7dbf80  		add	rt1,rt2
0000043c  00007c5c  MUL10_ret	ret
                    ' converts R to integer (ignores sign)
                    ' limit is 1.0e9
00000440  007cffa0  RTOINT		mov	rt1,#0		' clears result
00000444  bc79bfa1  		mov	rRExp,rRExp wc	' tests for < 0
00000448  1f01705c  	if_c	jmp	#RTOINT_ret
0000044c  09787f85  		cmp	rRExp,#9 wc
00000450  017ccf84  	if_nc	sub	rt1,#1		' overflow
00000454  1f014c5c  	if_nc	jmp	#RTOINT_ret
00000458  b776fd5c  		call	#mSHLR15		' will use up to 8 digits
0000045c  bc81bfa0  		mov	rt3,rRExp
00000460  0180ff80  		add	rt3,#1
00000464  0b1ffe5c  RTOINT_5		call	#MUL10
00000468  0474ff24  		rol	rR,#4
0000046c  ba83bfa0  		mov	rt4,rR
00000470  0f82ff60  		and	rt4,#$f
00000474  c17dbf80  		add	rt1,rt4
00000478  1981ffe4  		djnz	rt3,#RTOINT_5
0000047c  00007c5c  RTOINT_ret	ret
                    ' Converts a number in the 10000 to 99999 range to ascii
                    ' Number is in r, sign and decimals are unimportant
                    ' ptr1 is destination
                    '
00000480  bc79bfa1  TOASCIIQD	mov	rRExp,rRExp wc 	'checks for negative exponent,
00000484  307cf3a0  	if_c	mov	rt1,#48
00000488  55aff25c  	if_c	call	#EMITASCII
0000048c  3201705c  	if_c	jmp	#TOASCIIQD_40
                    ' number may be in range
00000490  05787f85  		cmp	rRExp,#5 wc
00000494  457ccfa0  	if_nc	mov	rt1,#69		' E signals error
00000498  55afce5c  	if_nc	call	#EMITASCII
0000049c  32014c5c  	if_nc	jmp	#TOASCIIQD_40
                    ' number is in range
000004a0  bc7fbfa0  		mov	rt2,rRExp
000004a4  017eff80  		add	rt2,#1
000004a8  ba81bfa0  		mov	rt3,rR		' working significant
000004ac  c07dbfa0  TOASCIIQD_10	mov	rt1,rt3
000004b0  187cff28  		shr	rt1,#24
000004b4  0f7cff60  		and	rt1,#15
000004b8  307cff80  		add	rt1,#48		' converts digit to ASCII
000004bc  55affe5c  		call	#EMITASCII
000004c0  0480ff2c  		shl	rt3,#4
000004c4  2b7fffe4  		djnz	rt2,#TOASCIIQD_10
000004c8  007cffa0  TOASCIIQD_40	mov	rt1,#0
000004cc  55affe5c  		call	#EMITASCII
000004d0  00007c5c  TOASCIIQD_ret	ret
                    ' Converts a number in the 10000 to 99999 range to ascii
                    ' Number is in r, sign is unimportant. Rounding is performed if the number is >= 1
                    ' ptr1 is destination
                    '
000004d4  bc79bfa1  TOASCIIQDR	mov	rRExp,rRExp wc 	'checks for negative exponent,
000004d8  307cf3a0  	if_c	mov	rt1,#48
000004dc  55aff25c  	if_c	call	#EMITASCII
000004e0  5201705c  	if_c	jmp	#TOASCIIQDR_40
                    ' number may be in range
000004e4  05787f85  		cmp	rRExp,#5 wc
                    TOASCIIQDR_5
000004e8  457ccfa0  	if_nc	mov	rt1,#69		' E signals error
000004ec  55afce5c  	if_nc	call	#EMITASCII
000004f0  52014c5c  	if_nc	jmp	#TOASCIIQDR_40
                    ' number is in range, adds rounding factor
000004f4  ba7dbfa0  		mov	rt1,rR
000004f8  057effa0  		mov	rt2,#5		' rounding argument
000004fc  0580ffa0  		mov	rt3,#5
00000500  bc81bf84  		sub	rt3,rRExp
00000504  0280ff2c  		shl	rt3,#2
00000508  c07fbf2c  		shl	rt2,rt3		' adjust rounding digit
0000050c  7a1efd5c  		call	#mADD8
00000510  bc7fbfa0  		mov	rt2,rRExp
00000514  cc853f62  		test	rt5,cnt_MSD wz
00000518  017ed780  	if_nz	add	rt2,#1		' increments exponent if overflow
0000051c  0484d728  	if_nz	shr	rt5,#4		' shifts working significant one to the right
00000520  057e7f85  		cmp	rt2,#5	wc
00000524  3a014c5c  	if_nc	jmp	#TOASCIIQDR_5
00000528  017eff80  		add	rt2,#1
0000052c  c27dbfa0  TOASCIIQDR_10	mov	rt1,rt5
00000530  187cff28  		shr	rt1,#24
00000534  0f7cff60  		and	rt1,#15
00000538  307cff80  		add	rt1,#48		' converts digit to ASCII
0000053c  55affe5c  		call	#EMITASCII
00000540  0484ff2c  		shl	rt5,#4
00000544  4b7fffe4  		djnz	rt2,#TOASCIIQDR_10
00000548  007cffa0  TOASCIIQDR_40	mov	rt1,#0
0000054c  55affe5c  		call	#EMITASCII
00000550  00007c5c  TOASCIIQDR_ret	ret
                    ' writes an ascii to HUB and increments pointer
                    ' rt1 is the byte to write
                    ' ptr1 is the pointer
00000554  b17d3f00  EMITASCII	wrbyte	rt1,ptr1
00000558  0162ff80  		add	ptr1,#1
0000055c  00007c5c  EMITASCII_ret	ret
                    ' Converts a null terminated string pointer by ptr1 in a BCD12 number in A
                    '
                    '  Spaces preceding the first valid character should be ignored. No spaces are allowed in between.
                    '  The only valid characters are digits 0 to 9, signs + and -, the period . and the letter e.
                    '  An optional significant sign, it should be the first valid character if present.
                    '  The next valid symbol is either a digit or the period.
                    '  A number of digits (any digit present beyond 12 will be chopped but they may add to the exponent if the number has an exponent greater than 12), if only a period was present a minimum of one digit must be present.
                    '  An exponent composed of three parts, the letter e to indicate it, an optional sign + or - and a minimum of 1 digit to a maximum of three digits.
                    ASCIITOBCD	
00000560  00007c5c  ASCIITOBCD_ret  ret
                    ' Calculates the square root of the argument in A
                    ' As it is it takes:
                    '
                    ' Input    cycles  result
                    '      .78 158344      0.883176086632
                    '     1.0    7012      1.0
                    '     2.0  107940      1.41421356237
                    '     5.0  169028      2.23606797749
                    '    50.0  142408      7.07106781186
                    '   100.0    7012     10.0
                    '  1000.0  129128     31.6227766016
                    ' 1.3e+51  134440      3.60555127546e+25
                    ERR_SQRN = 3
00000564  a651ff5c  BCDSQR15        call    #mCMPAZ
00000568  e5d2e95c          if_z    call    #LOADZTOR
0000056c  9301685c          if_z    jmp     #BCDSQR15_ret       ' argument is zero
00000570  006a7f86                  cmp     rASgn,#0 wz
00000574  0394d7a0          if_nz   mov     rerr,#ERR_SQRN      ' argument is negative
00000578  9301545c          if_nz   jmp     #BCDSQR15_ret
                        
0000057c  b36fbfa0                  mov     rB1,rA1             ' calculates 1/2*Significant
00000580  b26dbfa0                  mov     rB,rA
00000584  9439ff5c                  call    #mADDBB
00000588  9439ff5c                  call    #mADDBB
0000058c  9d4bff5c                  call    #mADDAB             ' A=0.5*Old_significant
00000590  e5d2fd5c                  call    #LOADZTOR           ' clears R
00000594  b479bfa0                  mov     rRExp,rAExp
00000598  0178ff38                  sar     rRExp,#1            ' exponent of result
0000059c  b47dbfa0                  mov     rt1,rAExp
000005a0  be7dbfd0                  adds    rt1,rt1
                                    
000005a4  be7dbf80                  add     rt1,rt1	        ' * 4
000005a8  b47dbf80                  add     rt1,rAExp           ' * 5
000005ac  017c7f62                  test    rt1,#1 wz
000005b0  a756e95c          if_z    call    #mSHRA15            ' shift right if exponent was even
                                    
000005b4  d087bfa0                  mov     rt6,cnt_FIVE
000005b8  0088ffa0                  mov     rt7,#0              ' rt6:rt7 is used to calculate the digits
000005bc  ce6dbfa0                  mov     rB,cnt_ONE
000005c0  006effa0                  mov     rB1,#0              ' we initialize constant
000005c4  0d8affa0                  mov     rt8,#13             ' 12 digits
000005c8  91017c5c  BCDSQR15_10     jmp     #BCDSQR15_25
000005cc  ba653f87  BCDSQR15_17     cmp     rA,rR wz wc
000005d0  bb672b87          if_z    cmp     rA1,rR1 wz wc
000005d4  8f01705c          if_c    jmp     #BCDSQR15_20
                    ' subtracts result
000005d8  b37dbfa0                  mov     rt1,rA1
000005dc  bb7fbfa0                  mov     rt2,rR1
000005e0  9040fd5c                  call    #mSUB8
000005e4  c267bfa0                  mov     rA1,rt5
000005e8  b27dbfa0                  mov     rt1,rA
000005ec  ba7fbfa0                  mov     rt2,rR
000005f0  9140fd5c                  call    #mSUB8C
000005f4  c265bfa0                  mov     rA,rt5
                    ' subtracts extra constant
000005f8  b37dbfa0                  mov     rt1,rA1
000005fc  c47fbfa0                  mov     rt2,rt7
00000600  9040fd5c                  call    #mSUB8
00000604  c267bfa0                  mov     rA1,rt5
00000608  b27dbfa0                  mov     rt1,rA
0000060c  c37fbfa0                  mov     rt2,rt6
00000610  9140fd5c                  call    #mSUB8C
00000614  c265bfa0                  mov     rA,rt5
                    ' adds one to result
00000618  bb7dbfa0                  mov     rt1,rR1
0000061c  b77fbfa0                  mov     rt2,rB1
00000620  7a1efd5c                  call    #mADD8
00000624  c277bfa0                  mov     rR1,rt5
00000628  ba7dbfa0                  mov     rt1,rR
0000062c  b67fbfa0                  mov     rt2,rB
00000630  7c1efd5c                  call    #mADD8C
00000634  c275bfa0                  mov     rR,rt5
00000638  73017c5c                  jmp     #BCDSQR15_17
0000063c  a14cfd5c  BCDSQR15_20     call    #mSHLA15              ' shifts left
00000640  b16cfd5c                  call    #mSHRB15 
00000644  c28efd5c  BCDSQR15_25     call    #mSHR6715
00000648  738bffe4                  djnz    rt8,#BCDSQR15_17
0000064c  00007c5c  BCDSQR15_ret    ret
                    ' B=B+B
00000650  b77dbfa0  mADDBB          mov     rt1,rB1
00000654  b77fbfa0                  mov     rt2,rB1
00000658  7a1efd5c                  call    #mADD8
0000065c  c26fbfa0                  mov     rB1,rt5
00000660  b67dbfa0                  mov     rt1,rB
00000664  b67fbfa0                  mov     rt2,rB
00000668  7c1efd5c                  call    #mADD8C
0000066c  c26dbfa0                  mov     rB,rt5
00000670  00007c5c  mADDBB_ret      ret
                    ' A = A+B
00000674  b37dbfa0  mADDAB          mov     rt1,rA1
00000678  b77fbfa0                  mov     rt2,rB1
0000067c  7a1efd5c                  call    #mADD8
00000680  c267bfa0                  mov     rA1,rt5
00000684  b27dbfa0                  mov     rt1,rA
00000688  b67fbfa0                  mov     rt2,rB
0000068c  7c1efd5c                  call    #mADD8C
00000690  c265bfa0                  mov     rA,rt5
00000694  00007c5c  mADDAB_ret      ret
                    ' checks if A or B are zero
00000698  b2653f62  mCMPAZ          test    rA,rA wz
0000069c  b3672b62          if_z    test    rA1,rA1 wz
000006a0  00007c5c  mCMPAZ_ret      ret
000006a4  b66d3f62  mCMPBZ          test    rB,rB wz
000006a8  b76f2b62          if_z    test    rB1,rB1 wz
000006ac  00007c5c  mCMPBZ_ret      ret
                    'compares A with B
000006b0  b6653f87  mCMPAB          cmp     rA,rB wc wz
000006b4  b7672b87          if_z    cmp     rA1,rB1 wc wz
000006b8  00007c5c  mCMPAB_ret      ret
000006bc  058a7f85  mSHRRP          cmp     rt8,#5 wc
000006c0  b1017c5c                  jmp     #mSHRRP_20            ' we will see
                    mSHRRP_20
                    ' *****************************************************
                    ' ***
                    ' registers 
                    ' rX Significand 15 digits + guard (leftmost digit)
                    ' rxExp exponent, in twos complement 
                    ' rxSign is Sign (MSB)
000006c4  00000000  ptr1		long 0
                    'ptr2		long 16
000006c8  00003001  rA		long $01300000
000006cc  00000000  rA1		long $00000000
000006d0  33000000  rAExp		long 51
000006d4  00000000  rASgn		long 0
000006d8  00008403  rB		long $03840000
000006dc  00000000  rB1		long $00000000
000006e0  05000000  rBExp		long $5
000006e4  00000000  rBSgn		long $0000_0000
000006e8  00000000  rR		long 0
000006ec  00000000  rR1		long 0
000006f0  00000000  rRExp		long 0
000006f4  00000000  rRSgn		long 0
                    ' temporals
000006f8  00000000  rt1		long 0
000006fc  00000000  rt2		long 0
00000700  00000000  rt3		long 0
00000704  00000000  rt4		long 0
00000708  00000000  rt5		long 0
0000070c  00000000  rt6		long 0
00000710  00000000  rt7		long 0
00000714  00000000  rt8               long 0
00000718  00000000  rcarry		long 0
0000071c  00000000  rcnt1		long 0
00000720  00000000  rmsk1		long 0
00000724  00000000  rsh1		long 0
00000728  00000000  rerr              long 0
0000072c  00000080  cnt_SMASK	long	$8000_0000	' sign mask
00000730  000000f0  cnt_MSD   	long	$f000_0000
00000734  0000000f  cnt_D12   	long	$0f00_0000
00000738  00000001  cnt_ONE		long	$0100_0000
0000073c  00f0ffff  cnt_2LMASK	long	$ffff_f000
00000740  00000005  cnt_FIVE          long     $0500_0000	
; Symbol table

000001f0 = PAR
000001f1 = CNT
000001f2 = INA
000001f3 = INB
000001f4 = OUTA
000001f5 = OUTB
000001f6 = DIRA
000001f7 = DIRB
000001f8 = CTRA
000001f9 = CTRB
000001fa = FRQA
000001fb = FRQB
000001fc = PHSA
000001fd = PHSB
000001fe = VCFG
000001ff = VSCL
0000000c = BCDSUB15
00000010 = BCDADD15
00000020 = ADD15
00000050 = ADD15_5
0000005c = ADD15_10
00000064 = ADD15_20
00000084 = SUB15
000000b4 = SUB15_5
000000b8 = SUB15_10
000000c4 = SUB15_15
000000cc = SUB15_20
000000d8 = SUB15_25
000000f8 = SUB15_30
000000f8 = ADD15_ret
000000f8 = BCDSUB15_ret
000000f8 = BCDADD15_ret
000000f8 = SUB15_ret
000000fc = BCDMUL15
00000118 = MUL15_5
0000013c = BCDMUL15_ret
00000140 = mMUL8
00000144 = mMUL8_5
00000154 = mMUL8_10
0000017c = mMUL8_15
00000180 = mMUL8_20
0000019c = mMUL8_ret
000001a0 = mADD15
000001c0 = mADD15_ret
000001c4 = mSUB15
000001e4 = mSUB15_ret
000001e8 = mADD8
000001f0 = mADD8C
000001fc = mADD8_1
00000220 = mADD8_5
0000023c = mADD8C_ret
0000023c = mADD8_ret
00000240 = mSUB8
00000244 = mSUB8C
00000250 = mSUB8_1
00000280 = mSUB8C_ret
00000280 = mSUB8_ret
00000284 = mSHLA15
00000298 = mSHLA15_ret
0000029c = mSHRA15
000002a0 = mSHRA15_1
000002ac = mSHRA15_ret
000002b0 = mSHLB15
000002b4 = mSHLB15_1
000002c0 = mSHLB15_ret
000002c4 = mSHRB15
000002d8 = mSHRB15_ret
000002dc = mSHLR15
000002e0 = mSHLR15_1
000002ec = mSHLR15_ret
000002f0 = mSHRR15
00000304 = mSHRR15_ret
00000308 = mSHR6715
0000031c = mSHR6715_ret
00000320 = mCMP15
00000328 = mCMP15_ret
0000032c = mCMPRZ
00000334 = mCMPRZ_ret
00000338 = XCHGAB
00000368 = XCHGAB_ret
0000036c = LOADATOR
0000037c = LOADATOR_ret
00000380 = LOADBTOR
00000390 = LOADBTOR_ret
00000394 = LOADZTOR
000003a4 = LOADZTOR_ret
000003a8 = LOADA
000003d0 = LOADA_ret
000003d4 = LOADB
000003fc = LOADB_ret
00000400 = SAVER
00000428 = SAVER_ret
0000042c = MUL10
0000043c = MUL10_ret
00000440 = RTOINT
00000464 = RTOINT_5
0000047c = RTOINT_ret
00000480 = TOASCIIQD
000004ac = TOASCIIQD_10
000004c8 = TOASCIIQD_40
000004d0 = TOASCIIQD_ret
000004d4 = TOASCIIQDR
000004e8 = TOASCIIQDR_5
0000052c = TOASCIIQDR_10
00000548 = TOASCIIQDR_40
00000550 = TOASCIIQDR_ret
00000554 = EMITASCII
0000055c = EMITASCII_ret
00000560 = ASCIITOBCD
00000560 = ASCIITOBCD_ret
00000003 = ERR_SQRN
00000564 = BCDSQR15
000005c8 = BCDSQR15_10
000005cc = BCDSQR15_17
0000063c = BCDSQR15_20
00000644 = BCDSQR15_25
0000064c = BCDSQR15_ret
00000650 = mADDBB
00000670 = mADDBB_ret
00000674 = mADDAB
00000694 = mADDAB_ret
00000698 = mCMPAZ
000006a0 = mCMPAZ_ret
000006a4 = mCMPBZ
000006ac = mCMPBZ_ret
000006b0 = mCMPAB
000006b8 = mCMPAB_ret
000006bc = mSHRRP
000006c4 = mSHRRP_20
000006c4 = ptr1
000006c8 = rA
000006cc = rA1
000006d0 = rAExp
000006d4 = rASgn
000006d8 = rB
000006dc = rB1
000006e0 = rBExp
000006e4 = rBSgn
000006e8 = rR
000006ec = rR1
000006f0 = rRExp
000006f4 = rRSgn
000006f8 = rt1
000006fc = rt2
00000700 = rt3
00000704 = rt4
00000708 = rt5
0000070c = rt6
00000710 = rt7
00000714 = rt8
00000718 = rcarry
0000071c = rcnt1
00000720 = rmsk1
00000724 = rsh1
00000728 = rerr
0000072c = cnt_SMASK
00000730 = cnt_MSD
00000734 = cnt_D12
00000738 = cnt_ONE
0000073c = cnt_2LMASK
00000740 = cnt_FIVE
